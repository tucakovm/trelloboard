syntax = "proto3";

option go_package = "proto/api-gateway";

import "google/protobuf/timestamp.proto"; // for handling time.Time type
import "google/api/annotations.proto";


service ProjectService {
//  rpc GetAllProjects(GetAllProjectsReq) returns (GetAllProjectsRes) {
//    option (google.api.http) = {
//      get: "/api/projects/{userId}/{username}"
//    };
//  }
  rpc GetAllProjects(GetAllProjectsReq) returns (GetAllProjectsRes) {
    option (google.api.http) = {
      get: "/api/projects/{username}"
    };
  }
  rpc Create(CreateProjectReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/project",
      body: "project"
    };
  }
  rpc Delete(DeleteProjectReq) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/project/{id}"
    };
  }
  rpc GetById(GetProjectByIdReq) returns (GetProjectByIdRes) {
    option (google.api.http) = {
      get: "/api/project/{id}"
    };
  }
  rpc AddMember(AddMembersRequest) returns (EmptyResponse) {
    option (google.api.http) = {
      put: "/api/projects/{id}/members"
      body: "user"
    };
  }
    rpc RemoveMember(RemoveMembersRequest) returns (EmptyResponse) {
      option (google.api.http) = {
        delete: "/api/projects/{projectId}/members/{userId}"
      };
    }
}

service ApiComposer{
  rpc Get(GetTasksAndWorkflowReq) returns (GetTasksAndWorkflowRes) {
    option (google.api.http) = {
      get: "/api/composition/{projectId}"
    };
  }
}

message GetTasksAndWorkflowReq{
  string projectId = 1;
}
message GetTasksAndWorkflowRes{
  ApiCompositionObject aco = 1;
}
message ApiCompositionObject {
  repeated Task tasks = 1;
  Workflow workflow = 2;
}

message RemoveMembersRequest {
  string projectId = 1;
  string userId = 2;
}

message AddMembersRequest{
  string id = 1;
  User user = 2;
}

message EmptyResponse {}

message Project {
  string id = 1;  // primitive.ObjectID is represented as a string
  string name = 2;
  google.protobuf.Timestamp completionDate = 3;  // time.Time type in Go
  int32 minMembers = 4;
  int32 maxMembers = 5;
  User manager = 6;
  repeated User members = 7; // Nested User message
}

message User {
  string id = 1;  // Define User fields based on your Go struct
  string username = 2;
  string role = 3;
}

message GetAllProjectsRes {
  repeated Project projects = 1;
}
message GetAllProjectsReq {
//  string userId = 1;
  string username = 1;
}
message CreateProjectReq {
  Project project = 1;
}
message DeleteProjectReq {
  string id = 1;
}
message GetProjectByIdRes {
  Project project = 1;
}
message GetProjectByIdReq {
  string id = 1;
}


service TaskService {
  rpc GetAllByProjectId(GetAllTasksReq) returns (GetAllTasksRes) {
    option (google.api.http) = {
      get: "/api/tasks/{id}"
    };
  }
  rpc Create(CreateTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/task",
      body: "task"
    };
  }
  rpc Delete(DeleteTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/task/{id}"
    };
  }
  rpc GetById(GetByIdTaskReq) returns (GetByIdTaskRes) {
    option (google.api.http) = {
      get: "/api/task/{id}"
    };
  }
  rpc AddMemberTask(AddMemberTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      put: "/api/task/{taskId}/members"
      body: "user"
    };
  }
  rpc RemoveMemberTask(RemoveMemberTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/task/{taskId}/members/{userId}"
    };
  }
  // Update a task
  rpc UpdateTask(UpdateTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      put: "/api/tasks/{id}",
      body: "*"
    };
  }
  rpc UploadFile(UploadFileRequest) returns (FileResponse) {
    option (google.api.http) = {
      post: "/api/tasks/files",
      body: "*"
    };
  }

  rpc DownloadFile(DownloadFileRequest) returns (FileResponse) {
    option (google.api.http) = {
      get: "/api/tasks/{taskId}/files/{fileId}"
    };
  }

  rpc DeleteFile(DeleteFileRequest) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/tasks/{taskId}/files/{fileId}"
    };
  }
  rpc GetAllFiles(GetTaskFilesRequest) returns (GetTaskFilesResponse){
    option (google.api.http) = {
      get: "/api/tasks/{taskId}/files"
    };
  }
}

message Task {
  string id = 1;
  string name = 2;
  string description = 3;
  string status = 4;
  string project_id = 5;
  repeated User members = 6;
}

message GetAllTasksRes {
  repeated Task tasks = 1;
}
message GetAllTasksReq {
  string id = 1;
}
message CreateTaskReq {
  Task task = 1;
}
message DeleteTaskReq {
  string id = 1;
}
message GetByIdTaskRes {
  Task task = 1;
}
message GetByIdTaskReq {
  string id = 1;
}
message AddMemberTaskReq{
  string taskId = 1;
  User user = 2;
}
message RemoveMemberTaskReq {
  string taskId = 1;
  string userId = 2;
}
message UpdateTaskReq {
  string id = 1;
  string name = 2;
  string description = 3;
  string status = 4;
  repeated User members = 5;
}


service UsersService {
  rpc RegisterHandler(RegisterReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/users/register",
      body: "user"
    };
  }
  rpc VerifyHandler(VerifyReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/users/verify",
      body: "verifyUser"
    };
  }
  rpc LoginUserHandler(LoginReq) returns (LoginRes) {
    option (google.api.http) = {
      post: "/api/users/login",
      body: "loginUser",

    };
  }
  rpc GetUserByUsername(GetUserByUsernameReq) returns (GetUserByUsernameRes) {
    option (google.api.http) = {
      get: "/api/users/{username}"
    };
  }
  rpc DeleteUserByUsername(GetUserByUsernameReq) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/users/{username}"
    };
  }
  rpc ChangePassword(ChangePasswordReq) returns (EmptyResponse) {
    option (google.api.http) = {
      put: "/api/users/change-password"
      body: "changeUser"
    };
  }
  rpc MagicLink(MagicLinkReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/users/magic-link",
      body: "magicLink"
    };
  }
  rpc RecoveryLink(RecoveryLinkReq) returns (EmptyResponse){
    option (google.api.http) = {
      post: "/api/users/recovery",
      body: "recoveryLink"
    };
  }
  rpc RecoverPassword(RecoveryPasswordRequest) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/users/recover-password",
      body: "*"
    };
  }

}

message RegisterReq{
  UserRegister user = 1;
}
message UserRegister{
  string firstname = 1;
  string lastname = 2;
  string username = 3;
  string email = 4;
  string password = 5;
  string role = 6;
  string key = 7;
  string captchaResponse = 8;
}
message VerifyReq{
    UserVerifyReq verifyUser = 1;
}
message UserVerifyReq{
  string username = 1;
  string code = 2;
}
message LoginReq{
  LoginUserR loginUser = 1;
}
message LoginUserR{
  string username = 1;
  string password = 2;
  string key = 3;
}
message GetUserByUsernameReq{
  string username = 1;
}

message GetUserByUsernameRes{
  UserL user = 1;
}
message LoginRes {
  string message = 1;
  string token = 2;
}


message UserL {
  string id = 1;
  string firstname = 2;
  string lastname = 3;
  string username = 4;
  string email = 5;
  string password = 6;
  bool isActive = 7;
  string code = 8;
  string role = 9;
}
message ChangePasswordReq{
    ChangePasswordUser changeUser = 1;
}
message ChangePasswordUser{
  string username = 1;
  string currentPassword = 2;
  string newPassword = 3;
}
message MagicLinkReq {
  MagicLinkRequest magicLink = 1;
}
message MagicLinkRequest {
  string email = 1;
}
message RecoveryLinkReq {
  RecoveryLinkRequest recoveryLink = 1;
}

message RecoveryLinkRequest {
  string email = 1;
}

message RecoveryPasswordRequest {
  string newPassword = 1;
  string username = 2;
  string code = 3;
}

service NotificationService {
  rpc GetAllNots(GetAllNotsReq) returns (GetAllNotsRes) {
    option (google.api.http) = {
      get: "/api/notifications/{userId}",
    };
  }
  rpc CreateNot(CreateNotReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/notifications",
      body: "not"
    };
  }
}
message GetAllNotsReq{
  string userId = 1;
}
message GetAllNotsRes{
  repeated Notification nots = 1;
}
message CreateNotReq{
  Notification not = 1;
}
message Notification{
  string userId = 1;
  google.protobuf.Timestamp createdAt = 2;
  string not_id = 3;
  string message = 4;
  string status = 5;
}
message UploadFileRequest {
  string taskId = 1;
  bytes fileContent = 2;
  string fileName = 3;
  string userId = 4;
}

message DownloadFileRequest {
  string taskId = 1;
  string fileId = 2;
}

message FileResponse {
  bytes fileContent = 1;
}

message DeleteFileRequest {
  string taskId = 1;
  string fileId = 2;
}
message GetTaskFilesRequest {
  string taskId = 1;
}

message GetTaskFilesResponse {
  repeated string fileNames = 1;
}

service WorkflowService {
  // Create a new workflow
  rpc CreateWorkflow(CreateWorkflowReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/workflows/create",
      body: "*" // trebalo bi da ovo dobaci ceo objekat || bilo je workflow
    };
  }

  // Add a task to a project
  rpc AddTask(AddTaskReq) returns (EmptyResponse) {
    option (google.api.http) = {
      post: "/api/workflows/addtask",
      body: "*"
    };
  }

  // Get the workflow details by project ID
  rpc GetWorkflowByProjectID(GetWorkflowReq) returns (GetWorkflowRes) {
    option (google.api.http) = {
      get: "/api/workflows/{project_id}"
    };
  }

  // Delete a workflow by project ID
  rpc DeleteWorkflowByProjectID(GetWorkflowReq) returns (EmptyResponse) {
    option (google.api.http) = {
      delete: "/api/workflows/{project_id}"
    };
  }

  // Check if all task dependencies are met
  rpc CheckTaskDependencies(CheckTaskDependenciesReq) returns (CheckTaskDependenciesRes) {
    option (google.api.http) = {
      post: "/api/workflows/checktaskdependencies",
      body: "*" // trebalo bi da ovo dobaci ceo objekat
    };
  }
}

service AnalyticsService {
  rpc GetAllByProjectId(GetAnalyticsRequest) returns (GetAnalyticsResponse) {
    option (google.api.http) = {
    get: "/api/analytics/{project_id}",
    };
  }
}

    message CreateWorkflowReq {
    string project_id = 1;
        string project_name = 2;
        }

    message AddTaskReq {
    string project_id = 1;
        TaskFW task = 2;
        }

    message GetWorkflowReq {
    string project_id = 1;
        }

    message GetWorkflowRes {
    Workflow workflow = 1;
        }

    message Workflow {
    string projectId = 1;
        string projectName = 2;
    repeated TaskFW tasks = 3;
        }

    message TaskFW {
    string id = 1;
        string name = 2;
    string description = 3;
        repeated string dependencies = 4;
        bool blocked = 5;
        }

    message CheckTaskDependenciesReq {
    string project_id = 1;
        string task_id = 2;
        }

    message CheckTaskDependenciesRes {
    bool allDependenciesMet = 1;
        }

message TaskStatusDuration {
  string status = 1;
  float duration = 2;
}

message TaskDurations {
  string task_id = 1;
  repeated TaskStatusDuration status_durations = 2;
}

message MemberTasks {
  string member_id = 1;
  repeated string tasks = 2;
}

message Analytic {
  string project_id = 1;
  int32 total_tasks = 2;
  map<string, int32> status_counts = 3;
  map<string, TaskDurations> task_status_durations = 4;
  map<string, MemberTasks> member_tasks = 5;
  bool finished_early = 6;
}

message GetAnalyticsRequest {
  string project_id = 1;
}

message GetAnalyticsResponse {
  Analytic analytic = 1;
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: workflows.proto

package workflows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkflowService_CreateWorkflow_FullMethodName            = "/WorkflowService/CreateWorkflow"
	WorkflowService_AddTask_FullMethodName                   = "/WorkflowService/AddTask"
	WorkflowService_GetWorkflowByProjectID_FullMethodName    = "/WorkflowService/GetWorkflowByProjectID"
	WorkflowService_DeleteWorkflowByProjectID_FullMethodName = "/WorkflowService/DeleteWorkflowByProjectID"
	WorkflowService_CheckTaskDependencies_FullMethodName     = "/WorkflowService/CheckTaskDependencies"
	WorkflowService_TaskExists_FullMethodName                = "/WorkflowService/TaskExists"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	// Create a new workflow
	CreateWorkflow(ctx context.Context, in *CreateWorkflowReq, opts ...grpc.CallOption) (*VoidResponse, error)
	// Add a task to an existing workflow
	AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*VoidResponse, error)
	// Retrieve a workflow by its project ID
	GetWorkflowByProjectID(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*GetWorkflowRes, error)
	// Delete a workflow by its project ID
	DeleteWorkflowByProjectID(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*VoidResponse, error)
	// Check task dependencies
	CheckTaskDependencies(ctx context.Context, in *CheckTaskDependenciesReq, opts ...grpc.CallOption) (*TaskDependenciesStatus, error)
	TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*TaskExistsResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowReq, opts ...grpc.CallOption) (*VoidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, WorkflowService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*VoidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, WorkflowService_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowByProjectID(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*GetWorkflowRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowRes)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowByProjectID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) DeleteWorkflowByProjectID(ctx context.Context, in *GetWorkflowReq, opts ...grpc.CallOption) (*VoidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidResponse)
	err := c.cc.Invoke(ctx, WorkflowService_DeleteWorkflowByProjectID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CheckTaskDependencies(ctx context.Context, in *CheckTaskDependenciesReq, opts ...grpc.CallOption) (*TaskDependenciesStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskDependenciesStatus)
	err := c.cc.Invoke(ctx, WorkflowService_CheckTaskDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*TaskExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExistsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_TaskExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility.
type WorkflowServiceServer interface {
	// Create a new workflow
	CreateWorkflow(context.Context, *CreateWorkflowReq) (*VoidResponse, error)
	// Add a task to an existing workflow
	AddTask(context.Context, *AddTaskReq) (*VoidResponse, error)
	// Retrieve a workflow by its project ID
	GetWorkflowByProjectID(context.Context, *GetWorkflowReq) (*GetWorkflowRes, error)
	// Delete a workflow by its project ID
	DeleteWorkflowByProjectID(context.Context, *GetWorkflowReq) (*VoidResponse, error)
	// Check task dependencies
	CheckTaskDependencies(context.Context, *CheckTaskDependenciesReq) (*TaskDependenciesStatus, error)
	TaskExists(context.Context, *TaskExistsRequest) (*TaskExistsResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkflowServiceServer struct{}

func (UnimplementedWorkflowServiceServer) CreateWorkflow(context.Context, *CreateWorkflowReq) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) AddTask(context.Context, *AddTaskReq) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowByProjectID(context.Context, *GetWorkflowReq) (*GetWorkflowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowByProjectID not implemented")
}
func (UnimplementedWorkflowServiceServer) DeleteWorkflowByProjectID(context.Context, *GetWorkflowReq) (*VoidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowByProjectID not implemented")
}
func (UnimplementedWorkflowServiceServer) CheckTaskDependencies(context.Context, *CheckTaskDependenciesReq) (*TaskDependenciesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTaskDependencies not implemented")
}
func (UnimplementedWorkflowServiceServer) TaskExists(context.Context, *TaskExistsRequest) (*TaskExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExists not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}
func (UnimplementedWorkflowServiceServer) testEmbeddedByValue()                         {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkflowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).AddTask(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowByProjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowByProjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowByProjectID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowByProjectID(ctx, req.(*GetWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_DeleteWorkflowByProjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).DeleteWorkflowByProjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_DeleteWorkflowByProjectID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).DeleteWorkflowByProjectID(ctx, req.(*GetWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CheckTaskDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskDependenciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CheckTaskDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CheckTaskDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CheckTaskDependencies(ctx, req.(*CheckTaskDependenciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_TaskExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).TaskExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_TaskExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).TaskExists(ctx, req.(*TaskExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowService_CreateWorkflow_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _WorkflowService_AddTask_Handler,
		},
		{
			MethodName: "GetWorkflowByProjectID",
			Handler:    _WorkflowService_GetWorkflowByProjectID_Handler,
		},
		{
			MethodName: "DeleteWorkflowByProjectID",
			Handler:    _WorkflowService_DeleteWorkflowByProjectID_Handler,
		},
		{
			MethodName: "CheckTaskDependencies",
			Handler:    _WorkflowService_CheckTaskDependencies_Handler,
		},
		{
			MethodName: "TaskExists",
			Handler:    _WorkflowService_TaskExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflows.proto",
}

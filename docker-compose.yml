services:
  angular:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: angular
    ports:
      - "4200:4200"
    depends_on:
      - api_gateway
    env_file:
      microservices/.env

  api_gateway:
    image: api_gateway
    container_name: "api_gateway"
    hostname: "api_gateway"
    build:
      context: microservices/api-gateway/
      dockerfile: Dockerfile
    restart: always
    env_file:
      microservices/.env
    depends_on:
      - projects_server
      - tasks_server
      - users_server
      - notifications_server
      - cassandra
      - mongo
    ports:
      - "8000:8000"
    volumes:
      - ./microservices/api-gateway/cert:/api-gateway/cert
    #dodao sam ovaj volumes

  projects_server:
    image: project-service
    build:
      context: microservices/projects-service
      dockerfile: Dockerfile
    restart: always
    container_name: "projects-server"
    hostname: "projects-server"
    ports:
      - "8001:8001"
    env_file:
      microservices/.env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  tasks_server:
    image: tasks-service
    build:
      context: microservices/tasks-service
      dockerfile: Dockerfile
    restart: always
    container_name: "tasks-server"
    hostname: "tasks-server"
    ports:
      - "8002:8002"
    env_file:
      microservices/.env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  users_server:
    image: users-service
    build:
      context: microservices/users-service
      dockerfile: Dockerfile
    restart: always
    container_name: "users-server"
    hostname: "users-server"
    ports:
      - "8003:8003"
      - "587:587"
    env_file:
      - microservices/.env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./users-data:/app/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8003/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379



  notifications_server:
    image: notifications_server
    build:
      context: microservices/notifications-service
      dockerfile: Dockerfile
    restart: always
    container_name: "notifications-server"
    hostname: "notifications-server"
    ports:
      - "8004:8004"
    env_file:
      microservices/.env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    volumes:
      - mongo_express_data:/data/db

  cassandra:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:
  redis-data:
services:
  angular:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: angular
    ports:
      - "${ANGULAR_PORT}:${ANGULAR_PORT}"
    depends_on:
      - api_gateway
    env_file:
      .env


  api_gateway:
    image: api_gateway
    container_name: "api_gateway"
    hostname: "api_gateway"
    build:
      context: microservices/api-gateway/
      dockerfile: Dockerfile
    restart: always
    env_file:
      .env
    depends_on:
      - projects_server
      - tasks_server
      - users_server
      - notifications_server
      - cassandra
      - mongo
      - nats
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    volumes:
      - ./microservices/api-gateway/cert2:/api-gateway/cert2

  projects_server:
    image: projects-server
    build:
      context: microservices/projects-service
      dockerfile: Dockerfile
    restart: always
    container_name: "projects-server"
    hostname: "projects-server"
    ports:
      - "${PROJECTS_SERVICE_PORT}:${PROJECTS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  tasks_server:
    image: tasks-service
    build:
      context: microservices/tasks-service
      dockerfile: Dockerfile
    restart: always
    container_name: "tasks-server"
    hostname: "tasks-server"
    ports:
      - "${TASKS_SERVICE_PORT}:${TASKS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  users_server:
    image: users-service
    build:
      context: microservices/users-service
      dockerfile: Dockerfile
    restart: always
    container_name: "users-server"
    hostname: "users-server"
    env_file:
      .env
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
      - "${SMTP_PORT}:${SMTP_PORT}"
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./users-data:/app/data



  notifications_server:
    image: notifications_server
    build:
      context: microservices/notifications-service
      dockerfile: Dockerfile
    restart: always
    container_name: "notifications-server"
    hostname: "notifications-server"
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT}:${NOTIFICATIONS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy


  workflow-service:
    build:
      context: microservices/workflow-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    env_file:
      .env
    depends_on:
      - neo4j
      - tracing



  mongo:
    image: mongo
    restart: always
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  consul:
    image: hashicorp/consul:latest
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"
      - "${CONSUL_PORT_TCP}"
      - "${CONSUL_PORT_UDP}"
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    env_file:
      .env
    volumes:
      - ./consul_store:/consul/data

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: "${ME_CONFIG_MONGODB_SERVER}"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${ME_CONFIG_MONGODB_ADMINUSERNAME}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${ME_CONFIG_MONGODB_ADMINPASSWORD}"
      ME_CONFIG_BASICAUTH_USERNAME: "${ME_CONFIG_BASICAUTH_USERNAME}"
      ME_CONFIG_BASICAUTH_PASSWORD: "${ME_CONFIG_BASICAUTH_PASSWORD}"
    depends_on:
      - mongo
    ports:
      - "${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}"
    volumes:
      - mongo_express_data:/data/db

  cassandra:
    image: cassandra
    restart: always
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    env_file:
      .env
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data


  nats:
    image: nats:latest
    ports:
      - "${NATS_PORT}:${NATS_PORT}"
    expose:
      - "${NATS_PORT}"

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  tracing:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT}"
      - "14268:14268"
      - "14250:14250"
    env_file:
      .env


  neo4j:
    image: neo4j:latest
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
    ports:
      - "7687:7687"
      - "7474:7474"
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:
  redis-data:
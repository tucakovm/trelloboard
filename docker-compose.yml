services:
  angular:
    image: mtucakov/angular:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: angular
    ports:
      - "${ANGULAR_PORT}:${ANGULAR_PORT}"
    depends_on:
      - api-gateway
    env_file:
      .env


  api-gateway:
    image: mtucakov/api-gateway:latest
    container_name: "api-gateway"
    hostname: "api-gateway"
    build:
      context: microservices/api-gateway/
      dockerfile: Dockerfile
    restart: always
    env_file:
      .env
    depends_on:
      - projects-server
      - tasks-server
      - users-server
      - notifications-server
      - workflow-server
      - analytics-server
      - cassandra
      - mongo
      - nats
      - consul
      - neo4j
      - api-composer
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    volumes:
      - ./microservices/api-gateway/cert2:/api-gateway/cert2

  projects-server:
    image: mtucakov/projects-server:latest
    build:
      context: microservices/projects-service
      dockerfile: Dockerfile
    restart: always
    container_name: "projects-server"
    hostname: "projects-server"
    ports:
      - "${PROJECTS_SERVICE_PORT}:${PROJECTS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      esdb:
        condition: service_healthy

  tasks-server:
    image: mtucakov/tasks-server:latest
    build:
      context: microservices/tasks-service
      dockerfile: Dockerfile
    restart: always
    container_name: "tasks-server"
    hostname: "tasks-server"
    ports:
      - "${TASKS_SERVICE_PORT}:${TASKS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      esdb:
        condition: service_healthy

  users-server:
    image: mtucakov/users-server:latest
    build:
      context: microservices/users-service
      dockerfile: Dockerfile
    restart: always
    container_name: "users-server"
    hostname: "users-server"
    env_file:
      .env
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
      - "${SMTP_PORT}:${SMTP_PORT}"
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
    volumes:
      - ./microservices/users-service/app.log:/app.log

  notifications-server:
    image: mtucakov/notifications-server:latest
    build:
      context: microservices/notifications-service
      dockerfile: Dockerfile
    restart: always
    container_name: "notifications-server"
    hostname: "notifications-server"
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT}:${NOTIFICATIONS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      mongo:
        condition: service_healthy
      cassandra:
        condition: service_healthy

  workflow-server:
    image: mtucakov/workflow-server:latest
    build:
      context: microservices/workflow-service
      dockerfile: Dockerfile
    restart: always
    container_name: "workflow-server"
    hostname: "workflow-server"
    ports:
      - "${WORKFLOW_SERVICE_PORT}:${WORKFLOW_SERVICE_PORT}" 
    env_file:
      .env
    depends_on:
#      neo4j:
#        condition: service_healthy
      tracing:
        condition: service_started

  api-composer:
    image: mtucakov/api-composer:latest
    build:
      context: microservices/api-composer
      dockerfile: Dockerfile
    restart: always
    container_name: "api-composer"
    hostname: "api-composer"
    ports:
      - "${API_COMPOSER_PORT}:${API_COMPOSER_PORT}"
    env_file:
      .env

  analytics-server:
    image: mtucakov/analytics-server:latest
    build:
      context: microservices/analytics-service
      dockerfile: Dockerfile
    restart: always
    container_name: "analytics-server"
    hostname: "analytics-server"
    ports:
      - "${ANALYTICS_SERVICE_PORT}:${ANALYTICS_SERVICE_PORT}"
    env_file:
      .env
    depends_on:
      - tasks-server
      - projects-server

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db

  consul:
    image: hashicorp/consul:latest
    container_name: consul
    ports:
      - "${CONSUL_PORT}:${CONSUL_PORT}"
      - "${CONSUL_PORT_TCP}"
      - "${CONSUL_PORT_UDP}"
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    env_file:
      .env
    volumes:
      - ./consul_store:/consul/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
      interval: 30s
      timeout: 5s
      retries: 3

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_SERVER: "${ME_CONFIG_MONGODB_SERVER}"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${ME_CONFIG_MONGODB_ADMINUSERNAME}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${ME_CONFIG_MONGODB_ADMINPASSWORD}"
      ME_CONFIG_BASICAUTH_USERNAME: "${ME_CONFIG_BASICAUTH_USERNAME}"
      ME_CONFIG_BASICAUTH_PASSWORD: "${ME_CONFIG_BASICAUTH_PASSWORD}"
    depends_on:
      - mongo
    ports:
      - "${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}"
    volumes:
      - mongo_express_data:/data/db

  cassandra:
    image: cassandra
    container_name: cassandra
    restart: always
    ports:
      - "${CASSANDRA_PORT}:${CASSANDRA_PORT}"
    env_file:
      .env
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data


  nats:
    image: nats:latest
    container_name: nats
    ports:
      - "${NATS_PORT}:${NATS_PORT}"
    expose:
      - "${NATS_PORT}"

  redis:
    image: redis:latest
    container_name: redis
    hostname: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  tracing:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
#      - "${JAEGER_UDP_PORT}:${JAEGER_UDP_PORT}"
#      - "${JAEGER_UDP_PORT2}:${JAEGER_UDP_PORT2}"
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT}"
      - "${JAEGER_INGEST_PORT}:${JAEGER_INGEST_PORT}"
      - "${JAEGER_INGEST_PORT2}:${JAEGER_INGEST_PORT2}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:16686" ]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      .env

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "${NAMENODE_PORT1}:${NAMENODE_PORT1}"
      - "${NAMENODE_PORT2}:${NAMENODE_PORT2}"
      - "${NAMENODE_PORT3}:${NAMENODE_PORT3}"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
      - CLUSTER_NAME=test
    env_file:
       .env

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
    env_file:
      .env
    depends_on:
      - namenode


  neo4j:
    image: neo4j:latest
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
    ports:
      - "${NEO4J_PORT}:${NEO4J_PORT}"
      - "${NEO4J_PORT2}:${NEO4J_PORT2}"
    healthcheck:
      test: [ "CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  esdb:
    image: eventstore/eventstore:21.10.8-buster-slim
    hostname: ${ESDB_HOST}
    container_name: ${ESDB_HOST}
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_EXT_TCP_PORT=${ESDB_UI_PORT}
      - EVENTSTORE_HTTP_PORT=${ESDB_PORT}
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - ${ESDB_PORT}:${ESDB_PORT}
      - ${ESDB_UI_PORT}:${ESDB_UI_PORT}

  sonarqube:
    container_name: sonarqube
    image: sonarqube
    environment:
      - SONARQUBE_JDBC_USERNAME=sonarqube
      - SONARQUBE_JDBC_PASSWORD=sonarpass
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube-database:5432/sonarqube
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - ./sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - 9001:9000

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:
  redis-data:
  #  eventstore-volume-data:
  #  eventstore-volume-logs:

  #namenode_data:
  #datanode_data:
  hadoop_namenode:
  hadoop_datanode1:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins: